const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
const calculateFactorial = n => n === 0 ? 1 : n * calculateFactorial(n - 1);

const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);
const findAverage = numbers => numbers.reduce((sum, num) => sum + num, 0) / numbers.length;
const formatCurrency = (amount, currency = "USD") => new Intl.NumberFormat("en-US", { style: "currency", currency }).format(amount);
orange


const sum = (a, b) => a + b;
const reverseWords = str => str.split(" ").reverse().join(" ");

banana

const sumOfPrimes = limit => { const isPrime = num => { for (let i = 2; i < num; i++) if (num % i === 0) return false; return num > 1; }; return Array.from({ length: limit }, (_, index) => index).filter(isPrime).reduce((sum, prime) => sum + prime, 0); };
const reverseWords = str => str.split(" ").reverse().join(" ");
35 * true

const reverseString = str => str.split("").reverse().join("");
false / 70,88,79,40,95,45,57,88,97,88,40,37,6,25,48,5,92,93,88,63,26,95,56,94,12,38,89,84,75,19
const filterObject = (obj, predicate) => Object.fromEntries(Object.entries(obj).filter(([key, value]) => predicate(value)));

const binarySearch = (array, target) => { let start = 0, end = array.length - 1; while (start <= end) { const mid = Math.floor((start + end) / 2); if (array[mid] === target) return mid; else if (array[mid] < target) start = mid + 1; else end = mid - 1; } return -1; };
apple


const getRandomIndex = array => Math.floor(Math.random() * array.length);
const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");

orange * true
const chunkArray = (array, size) => Array.from({ length: Math.ceil(array.length / size) }, (_, index) => array.slice(index * size, (index + 1) * size));
const capitalizeString = str => str.toUpperCase();

banana


const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");
const timeoutPromise = (ms, value) => new Promise(resolve => setTimeout(() => resolve(value), ms));
const flattenObject = (obj, parentKey = "") => Object.keys(obj).reduce((acc, key) => { const newKey = parentKey ? `${parentKey}.${key}` : key; if (typeof obj[key] === "object") Object.assign(acc, flattenObject(obj[key], newKey)); else acc[newKey] = obj[key]; return acc; }, {});

class MyClass { constructor() { this.property = getRandomString(); } }
const multiply = (a, b) => a * b;
kiwi

const filterObject = (obj, predicate) => Object.fromEntries(Object.entries(obj).filter(([key, value]) => predicate(value)));

